<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Async JS</title>
    <link rel="stylesheet" type="text/css" href="../../mystyle.css">
    <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Tenor+Sans" />
    <link rel="stylesheet" type="text/css" href="navigatoin.css">
    <link rel="stylesheet" type="text/css" href="../../vendor/prism.css">
</head>

<body>

    <header>
        <a href="../../index.html">
            <button class="fancy-button">Home</button>
        </a>
        <h1>Asynchronous JavaScript</h1>
    </header>

    <main>
        <div class="paperbox">
            <h2>Promises</h2>
            <p>A promise can have tree differnet states:</p>
            <ul>
                <li>pending</li>
                <li>settled</li>
                <ul>
                    <li>resolved</li>
                    <li>rejected</li>
                </ul>
            </ul>
            <p>In this example two files from the servers are downloaded <u>parallel and asynchronously</u> unsing the
                <code>fetch-API</code>.</p>
            <p>The <code>fetch</code> function uses promises instead of callbacks, as you might
                know it from the <code>XMLHttpRequest</code>.
                As said, a promise has one of the above listed states. Here, only if
                both promises are in the resolved state, they are will be displayed.</p>
            <p>Trigger the process by pressing the button:</p>
            <button class="fancy-button" id="loadAsyncBtn1">Load data</button>
            <button class="fancy-button" id="clearBtn">Clear</button>
            <p>Content from the first file:</p> <code id="firstfilecontent"></code>
            <p>Content from the second file:</p> <code id="secondfilecontent"></code>

<pre>
<code class="lang-javascript line-numbers">
const loadBtn = document.getElementById('loadAsyncBtn1');
</code>
</pre>
        </div>

        <hr>
        <div class="paperbox">
            <h2>async / await</h2>
            <p>The above scenario can also be done using async/ await which is again just <u>syntactic sugar</u>.</p>
            <button class="fancy-button" id="loadAsyncBtn2">Load data</button>
            <button class="fancy-button" id="clearBtn2">Clear</button>
            <p>Content from the first file:</p> <code id="firstfilecontentasync"></code>
            <p>Content from the second file:</p> <code id="secondfilecontentasync"></code>
        </div>

        <div class="paperbox">
            <h2>Web Worker</h2>
            <p>Here, the computational time of web workers is demonstrated.</p>
            <p>Therefore a list 100 000 random numbers is generated and then sorted.
                The sorting can done using the main thread or a worker thread.
                Click the buttons and view the time in milliseconds.
            </p>
            <p>Check the console for further insights.</p>
            <button class="fancy-button" id="generateBtn">Generate</button>
            <button class="fancy-button" id="sortMainBtn" disabled>Sort in main thread</button>
            <button class="fancy-button" id="sortWorkerBtn" disabled>Sort using worker</button>
            <p id="sortres1"></p>
            <p id="sortres2"></p>
        </div>

        <div class="paperbox">
            <h2>Navigation</h2>
            <p>Finally a whole new website.</p>

            <div>
                <header class="aprikot">
                    <nav>
                        <ul id="topnav"></ul>
                    </nav>
                </header>
                <div class="flex-container">
                    <nav class="aprikot">
                        <h3>Topics</h3>
                        <ul id="sideNavList"></ul>
                    </nav>
                    <main class="white">
                        <p id="mainarea"></p>
                    </main>
                    <aside class="aprikot">
                        <h3>Resources</h3>
                        <ul id="linksList"></ul>
                    </aside>
                </div>
            </div>
        </div>

    </main>
    <script src="Async.js"></script>
    <script src="../../vendor/prism.js"></script>
</body>

</html>